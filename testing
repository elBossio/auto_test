#include "../TEST_t/matrix.cpp"
#include "pch.h"

TEST(InputTest, EmptyMatrix)
{
    std::vector<std::vector<double>> vect_1;
    vect_1.push_back({ });
    Matrix A(vect_1);
    EXPECT_DEATH(A, "the matrix should not be empty");
}

TEST(InputTest, WrongDim)
{
    std::vector<std::vector<double>> vect_1;
    vect_1.push_back({ 1, 2 });
    vect_1.push_back({ 2, 3, 4 });
    Matrix A(vect_1);
    EXPECT_DEATH(A, "the matrix is not full");
}

TEST(Operands, WrongIndex)
{
    std::vector<std::vector<double>> vect_1;
    vect_1.push_back({ 1, 2 });
    vect_1.push_back({ 2, 3 });
    Matrix A(vect_1);
    int c;
    EXPECT_DEATH(c = A[2][2]; , "Index error");
}

TEST(Operands, SumWrongDim)
{
    std::vector<std::vector<double>> vect_1;
    vect_1.push_back({ 1, 2 });
    vect_1.push_back({ 2, 3 });
    std::vector<std::vector<double>> vect_2;
    vect_2.push_back({ 1, 2, 3 });
    vect_2.push_back({ 2, 3, 4 });
    vect_2.push_back({ 2, 3, 4 });
    Matrix A(vect_1), B(vect_2), C;
    EXPECT_DEATH(A + B, "It is impossible to perform addition. Arrays are different sizes");
}

TEST(Operands, MultWrongDim)
{
    std::vector<std::vector<double>> vect_1;
    vect_1.push_back({ 1, 2 });
    vect_1.push_back({ 2, 3 });
    std::vector<std::vector<double>> vect_2;
    vect_2.push_back({ 1, 2, 3 });
    vect_2.push_back({ 2, 3, 4 });
    vect_2.push_back({ 2, 3, 4 });
    Matrix A(vect_1), B(vect_2), C;
    EXPECT_DEATH(A * B, "It is impossible to perform multiplication. The number of columns of the first multiplier is not equal to the number of rows of the second multiplier");
}

TEST(Math, Sum)
{
    std::vector<std::vector<double>> vect_1;
    vect_1.push_back({ 1, 2 });
    vect_1.push_back({ 2, 3 });
    std::vector<std::vector<double>> vect_2;
    vect_2.push_back({ 1, 2 });
    vect_2.push_back({ 2, 3 });
    std::vector<std::vector<double>> vect_3;
    vect_3.push_back({ 2, 4 });
    vect_3.push_back({ 4, 6 });
    Matrix A(vect_1), B(vect_2), C(vect_3);
    EXPECT_EQ(A + B, C);
}

TEST(Math, Deduct)
{
    std::vector<std::vector<double>> vect_1;
    vect_1.push_back({ 1, 2 });
    vect_1.push_back({ 2, 3 });
    std::vector<std::vector<double>> vect_2;
    vect_2.push_back({ 1, 2 });
    vect_2.push_back({ 2, 3 });
    std::vector<std::vector<double>> vect_3;
    vect_3.push_back({ 0, 0 });
    vect_3.push_back({ 0, 0 });
    Matrix A(vect_1), B(vect_2), C(vect_3);
    EXPECT_EQ(C, A-B);
}

TEST(Math, Mult_n)
{
    std::vector<std::vector<double>> vect_1;
    vect_1.push_back({ 1, 2 });
    vect_1.push_back({ 2, 3 });
    std::vector<std::vector<double>> vect_2;
    vect_2.push_back({ 3, 6 });
    vect_2.push_back({ 6, 9 });
    Matrix A(vect_1), C(vect_2);
    int k = 3;
    EXPECT_EQ(C, A * k);
}

TEST(Math, Devide_n)
{
    std::vector<std::vector<double>> vect_1;
    vect_1.push_back({ 1, 2 });
    vect_1.push_back({ 2, 3 });
    std::vector<std::vector<double>> vect_2;
    vect_2.push_back({ 3, 6 });
    vect_2.push_back({ 6, 9 });
    Matrix A(vect_1), C(vect_2);
    int k = 3;
    EXPECT_EQ(A, C / k);
}

TEST(Math, Mult)
{
    std::vector<std::vector<double>> vect_1;
    vect_1.push_back({ 1, 2 });
    vect_1.push_back({ 2, 3 });
    std::vector<std::vector<double>> vect_2;
    vect_2.push_back({ 1, 2 });
    vect_2.push_back({ 2, 3 });
    std::vector<std::vector<double>> vect_3;
    vect_3.push_back({ 5, 8 });
    vect_3.push_back({ 8, 13 });
    Matrix A(vect_1), B(vect_2), C(vect_3);
    EXPECT_EQ(A * B, C);
}

TEST(Math, Mult_vect)
{
    std::vector<std::vector<double>> vect_1;
    vect_1.push_back({ 1, 2 });
    vect_1.push_back({ 2, 3 });
    std::vector<std::vector<double>> vect_2;
    vect_2.push_back({ 1 });
    vect_2.push_back({ 2 });
    std::vector<std::vector<double>> vect_3;
    vect_3.push_back({ 5 });
    vect_3.push_back({ 8 });
    Matrix A(vect_1), b(vect_2), C(vect_3);
    EXPECT_EQ(A * b, C);
}

TEST(Math, Transp)
{
    std::vector<std::vector<double>> vect_1;
    vect_1.push_back({ 1, 2 });
    vect_1.push_back({ 2, 3 });
    std::vector<std::vector<double>> vect_2;
    vect_2.push_back({ 1, 2 });
    vect_2.push_back({ 2, 3 });
    Matrix A(vect_1), B(vect_2);
    EXPECT_EQ(A.Transposition(), B);
}

TEST(INCORRECT_data, Zeros)
{
    double eps = 0.01;
    int counter = 0;
    std::vector<std::vector<double>> vect_1;
    vect_1.push_back({ 0, 0, 0 });
    vect_1.push_back({ 0, 0, 0 });
    vect_1.push_back({ 0, 0, 0 });
    std::vector<std::vector<double>> vect_2;
    vect_2.push_back({ 0 });
    vect_2.push_back({ 0 });
    vect_2.push_back({ 0 });
    Matrix A(vect_1), b(vect_2);
    Matrix x_1;
    MethodsLSAE::SimpleIterationMethod(A, b, counter, eps);
    EXPECT_DEATH(x_1, "Wrong input data");
}

TEST(CORRECT_data, SimpleIter)
{
    double eps = 0.00001;
    int counter = 0;
    std::vector<std::vector<double>> vect_1;
    vect_1.push_back({ 0, 2, 3 });
    vect_1.push_back({ 1, 2, 4 });
    vect_1.push_back({ 4, 5, 6 });
    std::vector<std::vector<double>> vect_2;
    vect_2.push_back({ 13 });
    vect_2.push_back({ 17 });
    vect_2.push_back({ 32 });
    Matrix A(vect_1), b(vect_2);
    std::vector<std::vector<double>> vect_3;
    vect_3.push_back({ 1 });
    vect_3.push_back({ 2 });
    vect_3.push_back({ 3 });
    Matrix x_1(vect_3);
    Matrix result(3, 1);
    result = MethodsLSAE::SimpleIterationMethod(A, b, counter, eps);
    EXPECT_TRUE(x_1 == result);
    x_1.Write();
    std::cout << std::endl;
    result.Write();
}

TEST(CORRECT_data, Gaus)
{
    std::vector<std::vector<double>> vect_1;
    vect_1.push_back({ 0, 2, 3 });
    vect_1.push_back({ 1, 2, 4 });
    vect_1.push_back({ 4, 5, 6 });
    std::vector<std::vector<double>> vect_2;
    vect_2.push_back({ 13 });
    vect_2.push_back({ 17 });
    vect_2.push_back({ 32 });
    Matrix A(vect_1), b(vect_2);
    std::vector<std::vector<double>> vect_3;
    vect_3.push_back({ 1 });
    vect_3.push_back({ 2 });
    vect_3.push_back({ 3 });
    Matrix x_1(vect_3);
    Matrix result(3, 1);
    result = MethodsLSAE::GaussMethod(A, b);
    EXPECT_TRUE(x_1 == result);
    x_1.Write();
    result.Write();
}

TEST(CORRECT_data, Haus)
{
    std::vector<std::vector<double>> vect_1;
    vect_1.push_back({ 0, 2, 3 });
    vect_1.push_back({ 1, 2, 4 });
    vect_1.push_back({ 4, 5, 6 });
    std::vector<std::vector<double>> vect_2;
    vect_2.push_back({ 13 });
    vect_2.push_back({ 17 });
    vect_2.push_back({ 32 });
    Matrix A(vect_1), b(vect_2);
    std::vector<std::vector<double>> vect_3;
    vect_3.push_back({ 1 });
    vect_3.push_back({ 2 });
    vect_3.push_back({ 3 });
    Matrix x_1(vect_3);
    Matrix result(3, 1);
    result = MethodsLSAE::NouseholderMethod(A, b);
    EXPECT_TRUE(x_1 == result);
    x_1.Write();
    std::cout << std::endl;
    result.Write();
}

TEST(CORRECT_data, Seidel)
{
    double eps = 0.00001;
    int counter = 0;
    std::vector<std::vector<double>> vect_1;
    vect_1.push_back({ 0, 2, 3 });
    vect_1.push_back({ 1, 2, 4 });
    vect_1.push_back({ 4, 5, 6 });
    std::vector<std::vector<double>> vect_2;
    vect_2.push_back({ 13 });
    vect_2.push_back({ 17 });
    vect_2.push_back({ 32 });
    Matrix A(vect_1), b(vect_2);
    std::vector<std::vector<double>> vect_3;
    vect_3.push_back({ 1 });
    vect_3.push_back({ 2 });
    vect_3.push_back({ 3 });
    Matrix x_1(vect_3);
    Matrix result(3, 1);
    result = MethodsLSAE::SeidelMethod(A, b, counter, eps);
    EXPECT_TRUE(x_1 == result);
    x_1.Write();
    std::cout << std::endl;
    result.Write();
}

TEST(Arithmetic, Devide0)
{
    int k = 0;
    std::vector<std::vector<double>> vect_1;
    vect_1.push_back({ 0, 2, 3 });
    vect_1.push_back({ 1, 2, 4 });
    vect_1.push_back({ 4, 5, 6 });
    Matrix A(vect_1);
    EXPECT_DEATH(A / k, "Impossible to divede. Number = 0");
}

TEST(Arithmetic, Sqrtnegative)
{
    int k = -4;
    EXPECT_DEATH(MathOper::SqrtHer(k), "Error root of a negative number");
}
TEST(MultiplicationTests, WrongDimensions) {
	std::vector<std::vector<double> > vect1;
	std::vector<std::vector<double> > vect2;
	vect1.push_back({ 1 });
	vect1.push_back({ 3 });
	vect2.push_back({ 1, 3 });
	vect2.push_back({ -2, 5 });
	Matrix A(vect1);
	Matrix B(vect2);
	EXPECT_DEATH(A * B, "It is impossible to perform multiplication. The number of columns of the first multiplier is not equal to the number of rows of the second multiplier");
}

TEST(MultiplicationTests, CorrectDimensions) {
	std::vector<std::vector<double> > vect1;
	std::vector<std::vector<double> > vect2;
	vect1.push_back({ 1, 2 });
	vect1.push_back({ 3, 4 });
	vect2.push_back({ 1, 5 });
	vect2.push_back({ -2, 4 });
	Matrix A(vect1);
	Matrix B(vect2);
	std::vector<std::vector<double> > vect3;
	vect3.push_back({ -3, 13 });
	vect3.push_back({ -5, 31 });
	Matrix C(vect3);
	EXPECT_EQ(C, A * B);
}
TEST(MultiplicationTests, SecondZeroMatrix) {
    std::vector<std::vector<double> > vect1;
    std::vector<std::vector<double> > vect2;
    vect1.push_back({ 1, 2 });
    vect1.push_back({ 3, 4 });
    vect2.push_back({ 0, 0 });
    vect2.push_back({ 0, 0 });
    Matrix A(vect1);
    Matrix B(vect2);
    std::vector<std::vector<double> > vect3;
    vect3.push_back({ 0, 0 });
    vect3.push_back({ 0, 0 });
    Matrix C(vect3);
    EXPECT_EQ(C, A * B);
}
TEST(MultiplicationTests, BigPositiveMatrix) {
    std::vector<std::vector<double> > vect1;
    std::vector<std::vector<double> > vect2;
    vect1.push_back({ 1102471294, 2 });
    vect1.push_back({ 3, 4 });
    vect2.push_back({ 1102999471294, 34634699975742 });
    vect2.push_back({ 0, 0 });
    Matrix A(vect1);
    Matrix B(vect2);
    std::vector<std::vector<double> > vect3;
    vect3.push_back({ 1102471294.0 * 1102999471294, 1102471294.0 * 34634699975742 });
    vect3.push_back({ 3.0 * 1102999471294, 3.0 * 34634699975742 });
    Matrix C(vect3);
    EXPECT_EQ(C, A * B);
}

TEST(MultiplicationTests, BigNegativeMatrix) {
    std::vector<std::vector<double> > vect1;
    std::vector<std::vector<double> > vect2;
    vect1.push_back({ 1102471294, 2 });
    vect1.push_back({ 3, 4 });
    vect2.push_back({ -1102471294, 34634675742 });
    vect2.push_back({ 0, 0 });
    Matrix A(vect1);
    Matrix B(vect2);
    std::vector<std::vector<double> > vect3;
    vect3.push_back({ -1102471294.0 * 1102471294, 1102471294.0 * 34634675742 });
    vect3.push_back({ -3.0 * 1102471294, 3.0 * 34634675742 });
    Matrix C(vect3);
    EXPECT_EQ(C, A * B);
}
TEST(MultiplicationTests, IncorrectSizeMatrix) {
    std::vector<std::vector<double> > vect1;
    std::vector<std::vector<double> > vect2;
    vect1.push_back({ 1, 2, 3 });
    vect1.push_back({ 3, 4 });
    vect2.push_back({ 3, 5 });
    vect2.push_back({ 8, 9 });
    EXPECT_DEATH(Matrix A(vect1), "Segmentation fault");
    Matrix A(vect1);
    Matrix B(vect2);
    EXPECT_DEATH(A * B, "It is impossible to perform multiplication. The number of columns of the first multiplier is not equal to the number of rows of the second multiplier");
}

TEST(MultiplicationTests, CorrectMultipliationDefferentSizeMatrix) {
    std::vector<std::vector<double> > vect1;
    std::vector<std::vector<double> > vect2;
    vect1.push_back({ 1, 5 });
    vect1.push_back({ 3, 9 });
    vect2.push_back({ 3 });
    vect2.push_back({ 8 });
    Matrix A(vect1);
    Matrix B(vect2);
    std::vector<std::vector<double> > vect3;
    vect3.push_back({ 43 });
    vect3.push_back({ 81 });
    Matrix C(vect3);
    EXPECT_EQ(C, A * B);
}

TEST(MultiplicationTests, IncorrectMultipliationDefferentSizeMatrix) {
    std::vector<std::vector<double> > vect1;
    std::vector<std::vector<double> > vect2;
    vect1.push_back({ 1, 5 });
    vect1.push_back({ 3, 9 });
    vect2.push_back({ 3 });
    vect2.push_back({ 8 });
    vect2.push_back({ 9 });
    Matrix A(vect1);
    Matrix B(vect2);
    EXPECT_DEATH(A * B, "It is impossible to perform multiplication. The number of columns of the first multiplier is not equal to the number of rows of the second multiplier");

}

TEST(MultiplicationTests, IncorrectMultipliationDefferentSizeMatrix2) {
    std::vector<std::vector<double> > vect1;
    std::vector<std::vector<double> > vect2;
    vect1.push_back({ 1, 5 });
    vect1.push_back({ 3, 9 });
    vect2.push_back({ 3 });
    Matrix A(vect1);
    Matrix B(vect2);
    EXPECT_DEATH(A * B, "It is impossible to perform multiplication. The number of columns of the first multiplier is not equal to the number of rows of the second multiplier");

}

TEST(MultiplicationTests, NullMatrix) {
    EXPECT_DEATH(Matrix A(0, 0); , "Incorrect size") << "Не обработана ошибка неверного ввода данных";
    Matrix A(0, 0);
    EXPECT_DEATH(Matrix B(0, 0); , "Incorrect size") << "Не обработана ошибка неверного ввода данных";
    Matrix B(0, 0);
    EXPECT_DEATH(A * B, "It is impossible to perform multiplication. The number of columns of the first multiplier is not equal to the number of rows of the second multiplier");

}

TEST(MultiplicationTests, FirstNullMatrix) {
    EXPECT_DEATH(Matrix A(0, 0); , "Incorrect size") << "Не обработана ошибка неверного ввода данных";
    Matrix A(0, 0);
    std::vector<std::vector<double> > vect2;
    vect2.push_back({ 3 });
    Matrix B(vect2);
    EXPECT_DEATH(A * B, "It is impossible to perform multiplication. The number of columns of the first multiplier is not equal to the number of rows of the second multiplier");

}
